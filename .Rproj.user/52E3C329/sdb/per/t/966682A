{
    "collab_server" : "",
    "contents" : "var.select <- function(data, variable.indexes=NULL, response.index=1, max.num.var=NULL,\n                       method=c(\"R-square\",\"AIC\",\"BIC\")){\n  # check arguments\n  if (missing(data) || class(data) != \"data.frame\")\n    stop(\"'data' is missing or incorrect\")\n  if (class(variable.indexes) != \"numeric\" && !is.null(variable.indexes))\n    stop(\"'variable.indexes' must be NULL or numeric\")\n  if (class(response.index) != \"numeric\" || length(response.index) > 1)\n    stop(\"'response.index' must be numeric with length 1\")\n  if (length(variable.indexes) >= ncol(data))\n    stop(\"'variable.indexes' and 'response.index' exceed number of columns in data\")\n  if (class(max.num.var) != \"numeric\" && !is.null(max.num.var))\n    stop(\"'max.num.var' must be NULL or numeric\")\n  if (max.num.var >= ncol(data) && !is.null(max.num.var))\n    stop(\"'max.num.var' must be less than or equal to the number of variables\")\n  \n  method <- match.arg(method)\n  \n  # intialize objects\n  selection <- list()\n  response <- data[,response.index]\n  if (is.null(variable.indexes))\n    variable.indexes <- 1:ncol(data)\n    variable.indexes <- variable.indexes[-response.index]\n  variables <- data[,variable.indexes]\n  p <- length(variables)\n  if (is.null(max.num.var))\n    max.num.var = length(variables)\n  \n  # calculate number of combinations\n  combinations <- 0\n  for (k in 1:p) combinations <- choose(p,k) + combinations\n  selection$combinations <- combinations\n  \n  # find combinations of variable indexes\n  selection$indexes <- list()\n  indexes.created <- 0\n  for (i in 1:max.num.var){\n    indexes <- combn(p,i)\n    for (index in 1:choose(p, i)){\n      selection$indexes[[(index+indexes.created)]] <- indexes[,index]\n    }\n    indexes.created <- indexes.created + choose(p, i)\n  }\n  model_number <- length(selection$indexes)\n  \n  # find names of variables for each model\n  selection$names <- list()\n  for (indexes in 1:length(selection$indexes)){\n    selection$names[[indexes]] <- names(variables)[selection$indexes[[indexes]]]\n  }\n  \n  # create generalized linear model for each combination of variables\n  selection$adj.r.square <- numeric(length=(model_number))\n  selection$AIC <- numeric(length=(model_number))\n  selection$BIC <- numeric(length=(model_number))\n  for (model in 1:length(selection$indexes)){\n    fit <- lm(response ~ ., data = as.data.frame(variables[,selection$indexes[[model]]]))\n    # calculate criterion for model\n    selection$adj.r.square[[model]] <- summary(fit)$adj.r.squared\n    selection$AIC[[model]] <- AIC(fit)\n    selection$BIC[[model]] <- BIC(fit)\n  }\n  \n  # create summary data frame\n  selection$model <- numeric(length=(model_number))\n  selection$var.number <- numeric(length=(model_number))\n  selection$data.frame <- data.frame(matrix(NA, nrow=model_number, ncol=4))\n  for (value in 1:length(selection$indexes)){\n    selection$model[[value]] <- value\n    selection$var.number[[value]] <- length(selection$indexes[[value]])\n  }\n  selection$data.frame[,1] <- (selection$var.number)\n  selection$data.frame[,2] <- (selection$adj.r.square)\n  selection$data.frame[,3] <- (selection$AIC)\n  selection$data.frame[,4] <- (selection$BIC)\n  names(selection$data.frame) <- c(\"Num_Variables\", \"Adj_R_Square\", \"AIC\", \"BIC\")\n  for (row in 1:model_number) row.names(selection$data.frame)[row] <- paste(\"model \", row, sep=\"\")\n  selection$data.frame <- selection$data.frame[order(-selection$data.frame$Adj_R_Square),]\n  class(selection) <- c(\"var.select\", \"list\")\n  return(selection)\n}",
    "created" : 1507652024896.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1577703006",
    "id" : "966682A",
    "lastKnownWriteTime" : 1507592986,
    "last_content_update" : 1507592986,
    "path" : "~/Programs/r_work/running/var.select.R",
    "project_path" : "var.select.R",
    "properties" : {
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}